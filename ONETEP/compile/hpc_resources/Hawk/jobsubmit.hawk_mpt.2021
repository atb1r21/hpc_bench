#!/bin/bash

# -------------------------------------------------
# A PBS submission script for ONETEP on HAWK.
# Supports hybrid (MPI/OMP) parallelism.
# 2021.09 Jacek Dziedzic, J.Dziedzic@soton.ac.uk
#                         University of Southampton
# with contributions from Lennart Gundelach and
#                         Christian Simmendinger.
# -------------------------------------------------

# v1.01 (2021.09.23)

# ==========================================================================================================
# Edit the following lines to your liking.
#
#PBS -N jobname
#PBS -l walltime=02:30:00
#PBS -l select=2:node_type=rome:mpiprocs=3:ompthreads=8
#              X                         Y            Z
# This asks for X nodes, Y MPI processes per node, and Z OMP threads per MPI process.
# The total number of CPU cores used is thus X*Y*Z.

# Point this to your ONETEP executable.
onetep_exe=\
"/zhome/academic/HLRS/pri/iprjadzi/ONETEP_jd_mpt/bin/onetep.hawk_intel19_omp_scalapack_mpt"

# Point this to your ONETEP launcher.
onetep_launcher=\
"/zhome/academic/HLRS/pri/iprjadzi/ONETEP_jd_mpt/utils/onetep_launcher"
#
# ==========================================================================================================

# You should NOT need to edit anything below this line.

# ---------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------
#

# Load the required modules
module load intel/19.1.3
module load mkl/19.1.0
module load mpt/2.23

# Change to PBS work directory
cd $PBS_O_WORKDIR

workdir=`pwd`
echo "--- This is the submission script, the time is `date`."
echo "--- ONETEP executable is '$onetep_exe'."
echo "--- workdir is '$workdir'."
echo "--- onetep_launcher is '$onetep_launcher'."

# Ensure exactly 1 .dat file in there.
ndats=`ls -l *dat | wc -l`

if [ "$ndats" == "0" ]; then
  echo "!!! There is no .dat file in the current directory. Aborting." >&2
  touch "%NO_DAT_FILE"
  exit 2
fi

if [ "$ndats" == "1" ]; then
  true
else
  echo "!!! More than one .dat file in the current directory, that's too many. Aborting." >&2
  touch "%MORE_THAN_ONE_DAT_FILE"
  exit 3
fi

rootname=`echo *.dat | sed -r "s/\.dat\$//"`
rootname_dat=$rootname".dat"
rootname_out=$rootname".out"
rootname_err=$rootname".err"

echo "--- The input file is $rootname_dat, the output goes to $rootname_out and errors go to $rootname_err."

# Ensure ONETEP executable is there and is indeed executable.
if [ ! -x "$onetep_exe" ]; then
  echo "!!! $onetep_exe does not exist or is not executable. Aborting!" >&2
  touch "%ONETEP_EXE_MISSING"
  exit 4
fi

# Ensure onetep_launcher is there and is indeed executable.
if [ ! -x "$onetep_launcher" ]; then
  echo "!!! $onetep_launcher does not exist or is not executable. Aborting!" >&2
  touch "%ONETEP_LAUNCHER_MISSING"
  exit 5
fi

# Dump some debugging information to files.
module list 2>\$modules_loaded
set >\$environment
ldd $onetep_exe >\$ldd

# Report details
echo "--- Total number of MPI processes as reported by PBS: $NCPUS."
echo "--- OMP_NUM_THREADS: $OMP_NUM_THREADS."
echo "--- PBS nodefile: $PBS_NODEFILE."
echo "--- Contents of PBS nodefile: "`cat $PBS_NODEFILE`
echo "--- Using this mpirun executable: "`which mpirun`
echo "--- Executing ONETEP via $onetep_launcher."
 
# Actually run ONETEP. 
# OMP_NUM_THREADS is set by the batch system. -np is not needed for MPT.
########################################################################################################################################################
mpirun omplace -nt $OMP_NUM_THREADS $onetep_launcher -e $onetep_exe -t $OMP_NUM_THREADS $rootname_dat >$rootname_out 2>$rootname_err
########################################################################################################################################################

echo "--- mpirun finished at `date`."

# Check for error conditions
result=$?
if [ $result -ne 0 ]; then
  echo "!!! mpirun reported a non-zero exit code $result. Aborting!" >&2
  touch "%MPIRUN_ERROR"
  exit 6
fi

if [ -r $rootname.error_message ]; then
  echo "!!! ONETEP left an error message file. Aborting!" >&2
  touch "%ONETEP_ERROR_DETECTED"
  exit 7
fi

tail $rootname.out | grep completed >/dev/null 2>/dev/null
result=$?
if [ $result -ne 0 ]; then
  echo "!!! ONETEP calculation likely did not complete. Aborting!" >&2
  touch "%ONETEP_DID_NOT_COMPLETE"
  exit 8
fi

echo "--- Looks like everything went fine. Praise be."
touch "%DONE"

echo "--- Finished successfully at `date`."
