#!/bin/bash

# ----------------------------------------------------
# A PBS submission script for ONETEP QC-tests on HAWK.
# ----------------------------------------------------
# Supports hybrid (MPI/OMP) parallelism.
# 2021.09 Jacek Dziedzic, J.Dziedzic@soton.ac.uk
#                         University of Southampton
# with contributions from Lennart Gundelach and
#                         Christian Simmendinger.
# ----------------------------------------------------

# v1.02 (2021.09.23)

# ==========================================================================================================
# Do not edit this file, unless you know what you're doing.
# Put it in the 'tests' subdirectory of your ONETEP installation, change to that directory and
# submit it by issuing:
# qsub qcsubmit.hawk_mpt
# ==========================================================================================================
#
#PBS -N QC-tests
#PBS -l walltime=03:00:00
#PBS -l select=1:node_type=rome:mpiprocs=4:ompthreads=8
# ==========================================================================================================

# ---------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------

# Change to PBS work directory
cd $PBS_O_WORKDIR

workdir=`pwd`

# Ensure we are started from ONETEP's 'tests' directory.
if [ `echo $workdir | grep -E "/tests$"` ]; then
  onetepdir=`echo $workdir | sed -r "s%/tests$%%"`
else
  echo "!!! This script must be run from the ONETEP installation's tests directory. Aborting!" >&2
  touch "%WAS_RUN_FROM_WRONG_DIR"
  exit 2
fi

onetep_launcher="$onetepdir""/utils/onetep_launcher"

echo "--- This is the submission script, the time is `date`."
echo "--- workdir is '$workdir'."
echo "--- ONETEP's top-level directory is '$onetepdir'."
echo "--- onetep_launcher is '$onetep_launcher'."

# Ensure onetep_launcher is there and is indeed executable.
if [ ! -x "$onetep_launcher" ]; then
  echo "!!! $onetep_launcher does not exist or is not executable. Aborting!" >&2
  touch "%ONETEP_LAUNCHER_MISSING"
  exit 5
fi

# Load the required modules
module load intel/19.1.3
module load mkl/19.1.0
module load mpt/2.23
module load python

workdir=`pwd`
echo "--- This is the submission script, the time is `date`."
echo "--- workdir is '$workdir'."
echo "--- onetep_launcher is '$onetep_launcher'."

# Dump some debugging information to files.
module list 2>\$modules_loaded
set >\$environment

# Report details
echo "--- Total number of MPI processes as reported by PBS: $NCPUS."
echo "--- OMP_NUM_THREADS: $OMP_NUM_THREADS."
echo "--- PBS nodefile: $PBS_NODEFILE."
echo "--- Contents of PBS nodefile: "`cat $PBS_NODEFILE`
echo "--- Using this mpirun executable: "`which mpirun`
echo "--- Executing ONETEP via $onetep_launcher."
 
# Ensure we have 'omplace' and the correct number of MPI ranks (not necessarily 4, but tc.nprocs).
# OMP_NUM_THREADS is set by the batch system. -np is not needed for MPT.
parallel_prefix="mpirun -np tc.nprocs omplace -nt $OMP_NUM_THREADS"

# Actually run testcode.
########################################################################################################################################################
./testcode/bin/testcode.py -v -e ../utils/onetep_launcher --user-option onetep launch_parallel "$parallel_prefix" --user-option onetep run_cmd_template 'tc.program tc.args -t 10 tc.input >tc.output 2>tc.error'
########################################################################################################################################################

echo "--- mpirun finished at `date`."

# Check for error conditions
result=$?
if [ $result -ne 0 ]; then
  echo "!!! mpirun reported a non-zero exit code $result. Aborting!" >&2
  touch "%MPIRUN_ERROR"
  exit 6
fi

echo "--- Looks like everything went fine. Praise be."
touch "%DONE"

echo "--- Finished successfully at `date`."
