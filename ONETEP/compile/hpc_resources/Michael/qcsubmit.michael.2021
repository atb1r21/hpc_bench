#!/bin/bash -l

# -------------------------------------------------------------------
# A PBS submission script for running ONETEP QC-tests on Michael.
# Supports hybrid (MPI/OMP) parallelism.
# Last updated on 19 March 2021 
# Arihant Bhandari, a.bhandari@soton.ac.uk, University of Southampton
# -------------------------------------------------------------------

# v1.00 (2021.03.19)

# ==================================================================================================================
# Do not edit this file, unless you know what you're doing, except perhaps for the line marked [*].
# Put it in the 'tests' subdirectory of your ONETEP installation, change to that directory and submit it by issuing:
# qsub qcsubmit.michael.2021
# ==================================================================================================================

#$ -S /bin/bash

# Give a name to the job
#$ -N QC_tests

# Select priority
#$ -P Gold

# Mention allocated project name
#$ -A Faraday_MSM_sky      # [*] Adjust this according to the allocated project.

# Select the type of node to run the job (K: 24-core node or A: 40-core node)
#$ -ac allow=K 

# Requesting one K node (24 cores) with 6 OMP threads per MPI process.
#$ -pe mpi 24                 # Total number of CPU cores for the job (== 1 node)
threads_per_process=6         # Number of OMP threads spawned from every MPI process.

# Request RAM per core (must be an integer)
#$ -l mem=1G

# Request TMPDIR space per node (default is 10 GB)
#$ -l tmpfs=10G

# Request walltime. The QC-test suite completes in just under 2h, we give it 3h just in case.
#$ -l h_rt=3:00:00

export OMP_NUM_THREADS=$threads_per_process      

# Change to current working directory
#$ -cwd

workdir=`pwd`

# Ensure we are started from ONETEP's 'tests' directory.
if [ `echo $workdir | grep -E "/tests$"` ]; then
  onetepdir=`echo $workdir | sed -r "s%/tests$%%"`
else
  echo "!!! This script must be run from the ONETEP installation's tests directory. Aborting!" >&2
  touch "%WAS_RUN_FROM_WRONG_DIR"
  exit 2
fi

onetep_launcher="$onetepdir""/utils/onetep_launcher"

echo "--- This is the submission script, the time is `date`."
echo "--- workdir is '$workdir'."
echo "--- ONETEP's top-level directory is '$onetepdir'."
echo "--- onetep_launcher is '$onetep_launcher'."

# Ensure onetep_launcher is there and is indeed executable.
if [ ! -x "$onetep_launcher" ]; then
  echo "!!! $onetep_launcher does not exist or is not executable. Aborting!" >&2
  touch "%ONETEP_LAUNCHER_MISSING"
  exit 5
fi

# Ensure onetep_launcher is there and is indeed executable.
if [ ! -x "$onetep_launcher" ]; then
  echo "!!! $onetep_launcher does not exist or is not executable. Aborting!" >&2
  touch "%ONETEP_LAUNCHER_MISSING"
  exit 5
fi

# Dump the module list to a file.
module list 2>\$modules_loaded

# Tidy any previous runs.
echo "y" | ./testcode/bin/testcode.py --older-than=0 tidy >/dev/null

# Ensure we run via 'gerun', on 1 node and a suitable number of MPI ranks (from 'userconfig' and 'jobconfig').
parallel_prefix="gerun -n tc.nprocs"

# Actually run testcode.
########################################################################################################################################################
./testcode/bin/testcode.py -v -e ../utils/onetep_launcher --user-option onetep launch_parallel "$parallel_prefix" --user-option onetep run_cmd_template 'tc.program tc.args -t 6 tc.input >tc.output 2>tc.error'
########################################################################################################################################################

echo "--- gerun finished at `date`."

# Check for error conditions
result=$?
if [ $result -ne 0 ]; then
  echo "!!! gerun reported a non-zero exit code $result. Aborting!" >&2
  touch "%GERUN_ERROR"
  exit 6
fi

echo "--- Looks like everything went fine. Praise be."
touch "%DONE"

echo "--- Finished running QC tests at `date`. Examine the .out file to see if they passed."
